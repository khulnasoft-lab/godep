[{"schema_version":"1.3.1","id":"GO-2020-0012","modified":"2023-06-12T18:45:41Z","published":"2021-04-14T20:04:52Z","aliases":["CVE-2020-9283","GHSA-ffhg-7mh4-33c4"],"summary":"Panic due to improper verification of cryptographic signatures in golang.org/x/crypto/ssh","details":"An attacker can craft an ssh-ed25519 or sk-ssh-ed25519@openssh.com public key, such that the library will panic when trying to verify a signature with it. If verifying signatures using user supplied public keys, this may be used as a denial of service vector.","affected":[{"package":{"name":"golang.org/x/crypto","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.0.0-20200220183623-bac4c82f6975"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/crypto/ssh","symbols":["CertChecker.Authenticate","CertChecker.CheckCert","CertChecker.CheckHostKey","Certificate.Verify","Dial","NewClientConn","NewPublicKey","NewServerConn","NewSignerFromKey","NewSignerFromSigner","ParseAuthorizedKey","ParseKnownHosts","ParsePrivateKey","ParsePrivateKeyWithPassphrase","ParsePublicKey","ParseRawPrivateKey","ParseRawPrivateKeyWithPassphrase","ed25519PublicKey.Verify","parseED25519","parseSKEd25519","skEd25519PublicKey.Verify"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/220357"},{"type":"FIX","url":"https://go.googlesource.com/crypto/+/bac4c82f69751a6dd76e702d54b3ceb88adab236"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/3L45YRc91SY"}],"credits":[{"name":"Alex Gaynor, Fish in a Barrel"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2020-0012"}},{"schema_version":"1.3.1","id":"GO-2020-0013","modified":"2023-06-12T18:45:41Z","published":"2021-04-14T20:04:52Z","aliases":["CVE-2017-3204","GHSA-xhjq-w7xm-p8qj"],"summary":"Man-in-the-middle attack in golang.org/x/crypto/ssh","details":"By default host key verification is disabled which allows for man-in-the-middle attacks against SSH clients if ClientConfig.HostKeyCallback is not set.","affected":[{"package":{"name":"golang.org/x/crypto","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.0.0-20170330155735-e4e2799dd7aa"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/crypto/ssh","symbols":["Dial","NewClientConn"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/340830"},{"type":"FIX","url":"https://go.googlesource.com/crypto/+/e4e2799dd7aab89f583e1d898300d96367750991"},{"type":"REPORT","url":"https://go.dev/issue/19767"},{"type":"WEB","url":"https://bridge.grumpy-troll.org/2017/04/golang-ssh-security/"}],"credits":[{"name":"Phil Pennock"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2020-0013"}},{"schema_version":"1.3.1","id":"GO-2021-0227","modified":"2023-06-12T18:45:41Z","published":"2022-02-17T17:35:32Z","aliases":["CVE-2020-29652","GHSA-3vm4-22fp-5rfm"],"summary":"Panic on crafted authentication request message in golang.org/x/crypto/ssh","details":"Clients can cause a panic in SSH servers. An attacker can craft an authentication request message for the “gssapi-with-mic” method which will cause NewServerConn to panic via a nil pointer dereference if ServerConfig.GSSAPIWithMICConfig is nil.","affected":[{"package":{"name":"golang.org/x/crypto","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.0.0-20201216223049-8b5274cf687f"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/crypto/ssh","symbols":["NewServerConn","connection.serverAuthenticate"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/278852"},{"type":"FIX","url":"https://go.googlesource.com/crypto/+/8b5274cf687fd9316b4108863654cc57385531e8"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/ouZIlBimOsE?pli=1"}],"credits":[{"name":"Joern Schneewesiz (GitLab Security Research Team)"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0227"}},{"schema_version":"1.3.1","id":"GO-2021-0356","modified":"2023-06-22T16:44:55Z","published":"2022-04-25T20:38:40Z","aliases":["CVE-2022-27191","GHSA-8c26-wmh5-6g9v"],"summary":"Denial of service via crafted Signer in golang.org/x/crypto/ssh","details":"Attackers can cause a crash in SSH servers when the server has been configured by passing a Signer to ServerConfig.AddHostKey such that\n1) the Signer passed to AddHostKey does not implement AlgorithmSigner, and\n2) the Signer passed to AddHostKey returns a key of type “ssh-rsa” from its PublicKey method.\n\nServers that only use Signer implementations provided by the ssh package are unaffected.","affected":[{"package":{"name":"golang.org/x/crypto","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.0.0-20220314234659-1baeb1ce4c0b"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/crypto/ssh","symbols":["ServerConfig.AddHostKey"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/392355"},{"type":"FIX","url":"https://go.googlesource.com/crypto/+/1baeb1ce4c0b006eff0f294c47cb7617598dfb3d"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/-cp44ypCT5s"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2021-0356"}},{"schema_version":"1.3.1","id":"GO-2022-0209","modified":"2023-06-12T18:45:41Z","published":"2022-07-01T20:15:25Z","aliases":["CVE-2019-11840","GHSA-r5c5-pr8j-pfp7"],"summary":"Insufficiently random values in golang.org/x/crypto/salsa20","details":"XORKeyStream generates incorrect and insecure output for very large inputs.\n\nIf more than 256 GiB of keystream is generated, or if the counter otherwise grows greater than 32 bits, the amd64 implementation will first generate incorrect output, and then cycle back to previously generated keystream. Repeated keystream bytes can lead to loss of confidentiality in encryption applications, or to predictability in CSPRNG applications.\n\nThe issue might affect uses of golang.org/x/crypto/nacl with extremely large messages.\n\nArchitectures other than amd64 and uses that generate less than 256 GiB of keystream for a single salsa20.XORKeyStream invocation are unaffected.","affected":[{"package":{"name":"golang.org/x/crypto","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.0.0-20190320223903-b7391e95e576"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/crypto/salsa20/salsa","goarch":["amd64"],"symbols":["XORKeyStream"]}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/168406"},{"type":"FIX","url":"https://go.googlesource.com/crypto/+/b7391e95e576cacdcdd422573063bc057239113d"},{"type":"REPORT","url":"https://go.dev/issue/30965"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/tjyNcJxb2vQ/m/n0NRBziSCAAJ"}],"credits":[{"name":"Michael McLoughlin"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0209"}},{"schema_version":"1.3.1","id":"GO-2022-0229","modified":"2023-06-12T18:45:41Z","published":"2022-07-06T18:23:48Z","aliases":["CVE-2020-7919","GHSA-cjjc-xp8v-855w"],"summary":"Panic in certificate parsing in crypto/x509 and golang.org/x/crypto/cryptobyte","details":"On 32-bit architectures, a malformed input to crypto/x509 or the ASN.1 parsing functions of golang.org/x/crypto/cryptobyte can lead to a panic.\n\nThe malformed certificate can be delivered via a crypto/tls connection to a client, or to a server that accepts client certificates. net/http clients can be made to crash by an HTTPS server, while net/http servers that accept client certificates will recover the panic and are unaffected.","affected":[{"package":{"name":"stdlib","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"1.12.16"},{"introduced":"1.13.0-0"},{"fixed":"1.13.7"}]}],"ecosystem_specific":{"imports":[{"path":"crypto/x509"}]}},{"package":{"name":"golang.org/x/crypto","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.0.0-20200124225646-8b5121be2f68"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/crypto/cryptobyte"}]}}],"references":[{"type":"FIX","url":"https://go.dev/cl/216680"},{"type":"FIX","url":"https://go.googlesource.com/go/+/b13ce14c4a6aa59b7b041ad2b6eed2d23e15b574"},{"type":"FIX","url":"https://go.dev/cl/216677"},{"type":"REPORT","url":"https://go.dev/issue/36837"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/Hsw4mHYc470"}],"credits":[{"name":"Project Wycheproof"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0229"}},{"schema_version":"1.3.1","id":"GO-2022-0968","modified":"2023-06-12T18:45:41Z","published":"2022-09-13T03:32:38Z","aliases":["CVE-2021-43565","GHSA-gwc9-m7rh-j2ww"],"summary":"Panic on malformed packets in golang.org/x/crypto/ssh","details":"Unauthenticated clients can cause a panic in SSH servers.\n\nWhen using AES-GCM or ChaCha20Poly1305, consuming a malformed packet which contains an empty plaintext causes a panic.","affected":[{"package":{"name":"golang.org/x/crypto","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.0.0-20211202192323-5770296d904e"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/crypto/ssh","symbols":["Dial","NewClientConn","NewServerConn","chacha20Poly1305Cipher.readCipherPacket","gcmCipher.readCipherPacket"]}]}}],"references":[{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/2AR1sKiM-Qs"},{"type":"REPORT","url":"https://go.dev/issues/49932"},{"type":"FIX","url":"https://go.dev/cl/368814/"}],"credits":[{"name":"Rod Hynes (Psiphon Inc)"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2022-0968"}},{"schema_version":"1.3.1","id":"GO-2023-1992","modified":"2023-08-23T14:38:42Z","published":"2023-08-23T14:38:42Z","aliases":["CVE-2019-11841","GHSA-x3jr-pf6g-c48f"],"summary":"Misleading message verification in golang.org/x/crypto/openpgp/clearsign","details":"The clearsign package accepts some malformed messages, making it possible for an attacker to trick a human user (but not a Go program) into thinking unverified text is part of the message.\n\nWith fix, messages with malformed headers in the SIGNED MESSAGE section are rejected.","affected":[{"package":{"name":"golang.org/x/crypto","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.0.0-20190424203555-c05e17bb3b2d"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/crypto/openpgp/clearsign","symbols":["Decode"]}]}}],"references":[{"type":"FIX","url":"https://go-review.git.corp.google.com/c/crypto/+/173778"},{"type":"FIX","url":"https://go.googlesource.com/crypto/+/c05e17bb3b2dca130fc919668a96b4bec9eb9442"},{"type":"WEB","url":"https://groups.google.com/d/msg/golang-openpgp/6vdgZoTgbIY/K6bBY9z3DAAJ"}],"credits":[{"name":"Aida Mynzhasova (SEC Consult Vulnerability Lab)"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2023-1992"}},{"schema_version":"1.3.1","id":"GO-2023-2402","modified":"2023-12-20T17:11:09Z","published":"2023-12-18T21:18:26Z","aliases":["CVE-2023-48795","GHSA-45x7-px36-x8w8"],"summary":"Man-in-the-middle attacker can compromise integrity of secure channel in golang.org/x/crypto","details":"A protocol weakness allows a MITM attacker to compromise the integrity of the secure channel before it is established, allowing the attacker to prevent transmission of a number of messages immediately after the secure channel is established without either side being aware.\n\nThe impact of this attack is relatively limited, as it does not compromise confidentiality of the channel. Notably this attack would allow an attacker to prevent the transmission of the SSH2_MSG_EXT_INFO message, disabling a handful of newer security features.\n\nThis protocol weakness was also fixed in OpenSSH 9.6.","affected":[{"package":{"name":"golang.org/x/crypto","ecosystem":"Go"},"ranges":[{"type":"SEMVER","events":[{"introduced":"0"},{"fixed":"0.17.0"}]}],"ecosystem_specific":{"imports":[{"path":"golang.org/x/crypto/ssh","symbols":["Client.Dial","Client.DialContext","Client.DialTCP","Client.Listen","Client.ListenTCP","Client.ListenUnix","Client.NewSession","Dial","DiscardRequests","NewClient","NewClientConn","NewServerConn","Request.Reply","Session.Close","Session.CombinedOutput","Session.Output","Session.RequestPty","Session.RequestSubsystem","Session.Run","Session.SendRequest","Session.Setenv","Session.Shell","Session.Signal","Session.Start","Session.WindowChange","channel.Accept","channel.Close","channel.CloseWrite","channel.Read","channel.ReadExtended","channel.Reject","channel.SendRequest","channel.Write","channel.WriteExtended","connectionState.readPacket","connectionState.writePacket","extChannel.Read","extChannel.Write","handshakeTransport.enterKeyExchange","handshakeTransport.readLoop","handshakeTransport.sendKexInit","mux.OpenChannel","mux.SendRequest","sessionStdin.Close","sshClientKeyboardInteractive.Challenge","tcpListener.Accept","tcpListener.Close","transport.readPacket","transport.writePacket","unixListener.Accept","unixListener.Close"]}]}}],"references":[{"type":"REPORT","url":"https://go.dev/issue/64784"},{"type":"FIX","url":"https://go.dev/cl/550715"},{"type":"FIX","url":"https://github.com/golang/crypto/commit/9d2ee975ef9fe627bf0a6f01c1f69e8ef1d4f05d"},{"type":"WEB","url":"https://groups.google.com/g/golang-announce/c/qA3XtxvMUyg"},{"type":"WEB","url":"https://www.openssh.com/txt/release-9.6"}],"credits":[{"name":"Fabian Bäumer (Ruhr University Bochum)"},{"name":"Marcus Brinkmann (Ruhr University Bochum)"},{"name":"Jörg Schwenk (Ruhr University Bochum)"}],"database_specific":{"url":"https://pkg.go.dev/vuln/GO-2023-2402"}}]